

---

# **Guide: Scaffolding, DbContext, and Area Integration in ASP.NET Core MVC**

---

## **Case 1: Create a new table in DB and scaffold it completely**

**Scenario:** You have just created a new table `Banner` in your database. You want to generate **model and DbContext** automatically.

### **Folder Structure Before**

```
OnlineShop/
├── Models/
│   └── Db/      <-- empty or does not contain OnlineShopContext yet
```

### **Terminal Command**

```bash
dotnet ef dbcontext scaffold "Server=localhost;Database=OnlineShop;User Id=sa;Password=Your-Password;TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer --output-dir Models/Db --context OnlineShopContext --data-annotations --force
```

**Explanation of each part:**

| Option                                                | Meaning                                                        |
| ----------------------------------------------------- | -------------------------------------------------------------- |
| `dotnet ef dbcontext scaffold`                        | Command to generate DbContext + model classes from existing DB |
| `"Server=...;Database=...;User Id=...;Password=...;"` | Your SQL Server connection string                              |
| `Microsoft.EntityFrameworkCore.SqlServer`             | Provider for SQL Server                                        |
| `--output-dir Models/Db`                              | Where to put the generated models                              |
| `--context OnlineShopContext`                         | Name of the DbContext class to create                          |
| `--data-annotations`                                  | Use attributes like `[Key]`, `[StringLength]` in models        |
| `--force`                                             | Overwrite existing files if they exist                         |

### **Folder Structure After**

```
OnlineShop/
├── Models/
│   └── Db/
│       ├── OnlineShopContext.cs
│       └── Banner.cs
```

✅ You now have a **fully scaffolded DbContext and Banner model**.

---

## **Case 2: Already have a DbContext, add a new table**

**Scenario:** You already have `Menu` table scaffolded and `OnlineShopContext`. You just created a new `Banner` table in the DB. You want **only the model** and then update the existing DbContext manually.

### **Folder Structure Before**

```
OnlineShop/
├── Models/
│   └── Db/
│       ├── OnlineShopContext.cs
│       └── Menu.cs
```

### **Terminal Command to Scaffold Only Banner**

```bash
dotnet ef dbcontext scaffold "Server=localhost;Database=OnlineShop;User Id=sa;Password=Your-Password;TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer --table Banner --output-dir Models/Db --data-annotations --no-onconfiguring --force
```

**Explanation of new flags:**

| Option                | Meaning                                             |
| --------------------- | --------------------------------------------------- |
| `--table Banner`      | Scaffold **only this table**, not the whole DB      |
| `--no-onconfiguring`  | Do **not overwrite** connection string in DbContext |
| Others same as Case 1 | Same as before                                      |

### **Update `OnlineShopContext.cs` manually**

```csharp
public virtual DbSet<Banner> Banners { get; set; }

modelBuilder.Entity<Banner>(entity =>
{
    entity.Property(e => e.Title).HasMaxLength(200);
    entity.Property(e => e.SubTitle).HasMaxLength(1000);
    entity.Property(e => e.ImageName).HasMaxLength(50);
    entity.Property(e => e.Link).HasMaxLength(100);
    entity.Property(e => e.Position).HasMaxLength(50);
});
```

### **Folder Structure After**

```
OnlineShop/
├── Models/
│   └── Db/
│       ├── OnlineShopContext.cs  <-- DbSet<Banner> added
│       ├── Menu.cs
│       └── Banner.cs             <-- scaffolded model
```

---

## **Case 3: Use the model and DbContext in an Area (`Admin`)**

**Scenario:** You want to **use the new Banner model inside `Areas/Admin`** for controllers and views.

### **Folder Structure Before**

```
OnlineShop/
├── Areas/
│   └── Admin/
│       ├── Controllers/
│       └── Views/
├── Models/
│   └── Db/
│       ├── OnlineShopContext.cs
│       ├── Menu.cs
│       └── Banner.cs
```

### **Step 1: Create Area Controller**

`Areas/Admin/Controllers/BannerController.cs`:

```csharp
using Microsoft.AspNetCore.Mvc;
using Online_shop.Models.Db;

namespace Online_shop.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class BannerController : Controller
    {
        private readonly OnlineShopContext _context;

        public BannerController(OnlineShopContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            var banners = _context.Banners.ToList();
            return View(banners);
        }
    }
}
```

### **Step 2: Create Views**

```
Areas/
└── Admin/
    └── Views/
        └── Banner/
            ├── Index.cshtml
            ├── Create.cshtml
            ├── Edit.cshtml
            └── Details.cshtml
```

### **Step 3: Add Admin Layout Menu Link**

```html
<a asp-area="Admin" asp-controller="Banner" asp-action="Index">Banners</a>
```

### **Folder Structure After**

```
OnlineShop/
├── Areas/
│   └── Admin/
│       ├── Controllers/
│       │   └── BannerController.cs
│       └── Views/
│           └── Banner/
│               ├── Index.cshtml
│               ├── Create.cshtml
│               ├── Edit.cshtml
│               └── Details.cshtml
├── Models/
│   └── Db/
│       ├── OnlineShopContext.cs
│       ├── Menu.cs
│       └── Banner.cs
```

---

##  **Key Notes About the Scaffold Command You Mentioned**

```bash
dotnet ef dbcontext scaffold "Server=localhost;Database=OnlineShop;User Id=sa;Password=Your-Password;TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer --table Banner --output-dir Models/Db --data-annotations --no-onconfiguring --force
```

* **Purpose:** Scaffold a **single table** into a model class, **without overwriting the existing DbContext**
* **Use Case:** Adding a new table to an existing project without touching other models or the existing context
* **Important Flags:**

  * `--table Banner` → only this table
  * `--output-dir Models/Db` → put model under Models/Db
  * `--no-onconfiguring` → prevent changing existing DbContext connection
  * `--force` → overwrite if file exists

---

If you want, I can **draw a single diagram showing all three cases with arrows** to visualize **how the database, models, DbContext, and Admin area interact** — it will act like a **one-page cheat sheet**.

Do you want me to do that?
